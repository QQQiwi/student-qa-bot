from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message

import app.users.keyboard as kb

from utils.llm_api import ask_llm
from logger import logger

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –Ø - GuideBO. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–æ–º! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                         reply_markup=kb.main_keyboard)

@router.message(F.text == 'üïµÔ∏è‚Äç‚ôÇÔ∏è –û–±–æ –º–Ω–µ')
async def cmd_start(message: Message):
    await message.answer("<b>ü§ñ –Ø ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ GuideBO</b>, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ö–ù–ò–∏–¢ –°–ì–£.<br><br>"
                        "üéì –ú–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Å —É—á—ë–±–æ–π –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.<br><br>"
                        "üß† –Ø –∏—Å–ø–æ–ª—å–∑—É—é <i>–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç</i>, —á—Ç–æ–±—ã –¥–∞–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ, —Ç–æ—á–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.<br><br>"
                        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç ‚Äî –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!",
                        parse_mode="HTML",reply_markup=kb.start_inline_keyboard)

@router.message(F.text & ~F.text.startswith("/"))
async def handle_message_to_llm(message: Message):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        user_input = message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not user_input.strip():
            await processing_msg.edit_text("‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(user_input) > 1000:
            await processing_msg.edit_text("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        llm_reply = await ask_llm(user_input)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
        if not llm_reply:
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
            return
            
        await processing_msg.edit_text(llm_reply)
        
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        error_msg = f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        await message.answer(error_msg)
        logger.error(f"Error in handle_message_to_llm: {str(e)}")
